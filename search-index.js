var searchIndex = {};
searchIndex['xswag_base'] = {"items":[[0,"","xswag_base","`xswag-base` provides basic functionality for the xswag system.",null,null],[0,"code","","This module contains types and functions to work on the raw source code.",null,null],[3,"BytePos","xswag_base::code","Position within source specified by byte offset. This is not equal to\n`CharPos` thanks to UTF-8 and multibyte chars. This type always represents\npositions relative to the whole codemap.",null,null],[3,"Span","","A region within the source specified by first and last byte offset. `lo`\nbyte is included in the span, `hi` byte is excluded.",null,null],[12,"lo","","Low byte, inclusive",0,null],[12,"hi","","High byte, exclusive",0,null],[3,"LineIdx","","Represents a line index.",null,null],[3,"ColIdx","","Represents a column index.",null,null],[3,"Loc","","Location within one file specified by line and column.",null,null],[12,"line","","",1,null],[12,"col","","",1,null],[3,"FileMap","","Stores the content of a file and keeps track of some position meta data,\nsuch as linebreaks.",null,null],[11,"default","","",2,{"inputs":[{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"fmt","","",2,{"inputs":[{"name":"bytepos"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",2,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"add","","",2,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"sub","","",2,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"bytepos"}}],[11,"fmt","","",0,{"inputs":[{"name":"span"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"single","","Creates a span that points to a single char",0,{"inputs":[{"name":"span"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"new","","Creates a span from a lo and hi (shorter than struct constructor\nsyntax)",0,{"inputs":[{"name":"span"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"span"}}],[11,"from_pair","","Creates a span from a tuple",0,null],[11,"dummy","","Creates a dummy span. Should be used with caution.",0,{"inputs":[{"name":"span"}],"output":{"name":"span"}}],[11,"is_dummy","","Checks if the this span is a dummy span",0,{"inputs":[{"name":"span"}],"output":{"name":"bool"}}],[11,"len","","Returns the length (number of bytes) of the span or 0 if it's a dummy\nspan",0,{"inputs":[{"name":"span"}],"output":{"name":"srcoffset"}}],[11,"hull","","Returns the smallest span which encloses both given spans",0,{"inputs":[{"name":"span"},{"name":"self"}],"output":{"name":"span"}}],[11,"contains","","Checks if this span contains another span. A dummy span never contains\nany other span and is never contained in another span.",0,{"inputs":[{"name":"span"},{"name":"self"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[{"name":"lineidx"}],"output":{"name":"lineidx"}}],[11,"fmt","","",3,{"inputs":[{"name":"lineidx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",3,{"inputs":[{"name":"lineidx"},{"name":"lineidx"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"lineidx"},{"name":"lineidx"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"lineidx"},{"name":"lineidx"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"lineidx"},{"name":"lineidx"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"lineidx"},{"name":"lineidx"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"lineidx"},{"name":"lineidx"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"lineidx"},{"name":"lineidx"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"lineidx"},{"name":"lineidx"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"lineidx"}],"output":{"name":"lineidx"}}],[11,"fmt","","",3,{"inputs":[{"name":"lineidx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",4,{"inputs":[{"name":"colidx"}],"output":{"name":"colidx"}}],[11,"fmt","","",4,{"inputs":[{"name":"colidx"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"colidx"},{"name":"colidx"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"colidx"},{"name":"colidx"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"colidx"},{"name":"colidx"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"colidx"},{"name":"colidx"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"colidx"},{"name":"colidx"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"colidx"},{"name":"colidx"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"colidx"},{"name":"colidx"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"colidx"},{"name":"colidx"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"colidx"}],"output":{"name":"colidx"}}],[11,"add","","",3,{"inputs":[{"name":"lineidx"},{"name":"lineidx"}],"output":{"name":"lineidx"}}],[11,"sub","","",3,{"inputs":[{"name":"lineidx"},{"name":"lineidx"}],"output":{"name":"lineidx"}}],[11,"add","","",4,{"inputs":[{"name":"colidx"},{"name":"colidx"}],"output":{"name":"colidx"}}],[11,"sub","","",4,{"inputs":[{"name":"colidx"},{"name":"colidx"}],"output":{"name":"colidx"}}],[11,"fmt","","",1,{"inputs":[{"name":"loc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"loc"},{"name":"loc"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"loc"},{"name":"loc"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"loc"}],"output":{"name":"loc"}}],[11,"new","","Creates a new Filemap from existing buffers for the filename and\ncontent of the file.",5,{"inputs":[{"name":"filemap"},{"name":"u"},{"name":"v"}],"output":{"name":"filemap"}}],[11,"filename","","",5,{"inputs":[{"name":"filemap"}],"output":{"name":"str"}}],[11,"src","","",5,{"inputs":[{"name":"filemap"}],"output":{"name":"str"}}],[11,"add_line","","Adds a new line beginning with the given BytePos to the list. Line\nbeginnings need to be added in order!",5,{"inputs":[{"name":"filemap"},{"name":"bytepos"}],"output":null}],[11,"num_lines","","Returns the number of lines.",5,{"inputs":[{"name":"filemap"}],"output":{"name":"usize"}}],[11,"get_loc","","Returns the location of the given bytes as line and col numbers within\nthis file.",5,{"inputs":[{"name":"filemap"},{"name":"bytepos"}],"output":{"name":"loc"}}],[11,"get_line","","Returns the line with the given index or `None` if it is invalid.",5,{"inputs":[{"name":"filemap"},{"name":"lineidx"}],"output":{"name":"option"}}],[11,"find_lines","","Searches for line endings and collects all line beginnings in the\nsource string. It starts searching at the latest line beginning in the\nlist so far (or at the beginning of none was added yet).",5,{"inputs":[{"name":"filemap"}],"output":null}],[6,"SrcOffset","","Type do index one byte in a source code. It should be rather small, since\nit's used a lot.",null,null],[0,"diag","xswag_base","Types and functions for error diagnostic and printing",null,null],[3,"Report","xswag_base::diag","Describes some kind of problem or occurrence in the code. Contains one or\nmore remarks with descriptions and separate code spans.",null,null],[12,"kind","","Kind of the report (usually the same as the first remark kind)",6,null],[12,"span","","Span of the main code snippet",6,null],[12,"remarks","","List of remarks describing the report",6,null],[3,"Remark","","Part of a Report that describes the occurrence with an optional code\nsnippet.",null,null],[12,"kind","","",7,null],[12,"desc","","Remark description",7,null],[12,"span","","",7,null],[3,"PrintOptions","","Options for printing on the terminal. By `default()` everything is enabled.",null,null],[12,"unicode","","Use of unicode allowed?",8,null],[12,"color","","Use of colors allowed?",8,null],[12,"line_wrap","","Is line wrapping allowed?",8,null],[4,"ReportKind","","A report can either be an `Error` or a `Warning`. Still pretty similar to\n`RemarkType` -- may be merged with it in the future.",null,null],[13,"Error","","Something went very wrong and will stop further processing",9,null],[13,"Warning","","Something important should be fixed, but doesn't stop processing",9,null],[4,"RemarkKind","","Kinds of remarks",null,null],[13,"Error","","Something went very wrong and will stop further processing",10,null],[13,"Warning","","Something important should be fixed, but doesn't stop processing",10,null],[13,"Note","","Additional information about an error or a warning",10,null],[5,"print","","Pretty prints a report",null,{"inputs":[{"name":"report"},{"name":"filemap"},{"name":"printoptions"}],"output":null}],[11,"fmt","","",6,{"inputs":[{"name":"report"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"report"},{"name":"report"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"report"},{"name":"report"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"report"}],"output":{"name":"report"}}],[11,"simple_error","","Creates a error report with one message and one span",6,{"inputs":[{"name":"report"},{"name":"s"},{"name":"span"}],"output":{"name":"report"}}],[11,"simple_warning","","Creates a warning report with one message and one span",6,{"inputs":[{"name":"report"},{"name":"s"},{"name":"span"}],"output":{"name":"report"}}],[11,"with_note","","Adds a note without a span/code snippet to the existing Report",6,{"inputs":[{"name":"report"},{"name":"s"}],"output":{"name":"report"}}],[11,"with_span_note","","Adds a note with a span/code snippet to the existing Report",6,{"inputs":[{"name":"report"},{"name":"s"},{"name":"span"}],"output":{"name":"report"}}],[11,"fmt","","",9,{"inputs":[{"name":"reportkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"reportkind"},{"name":"reportkind"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"reportkind"},{"name":"reportkind"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"reportkind"}],"output":{"name":"reportkind"}}],[11,"fmt","","",7,{"inputs":[{"name":"remark"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"remark"},{"name":"remark"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"remark"},{"name":"remark"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"remark"}],"output":{"name":"remark"}}],[11,"fmt","","",10,{"inputs":[{"name":"remarkkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"remarkkind"},{"name":"remarkkind"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"remarkkind"},{"name":"remarkkind"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"remarkkind"}],"output":{"name":"remarkkind"}}],[11,"fmt","","",8,{"inputs":[{"name":"printoptions"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"printoptions"},{"name":"printoptions"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"printoptions"},{"name":"printoptions"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"printoptions"}],"output":{"name":"printoptions"}}],[11,"default","","",8,{"inputs":[{"name":"printoptions"}],"output":{"name":"self"}}]],"paths":[[3,"Span"],[3,"Loc"],[3,"BytePos"],[3,"LineIdx"],[3,"ColIdx"],[3,"FileMap"],[3,"Report"],[3,"Remark"],[3,"PrintOptions"],[4,"ReportKind"],[4,"RemarkKind"]]};
searchIndex['term_painter'] = {"items":[[0,"","term_painter","This is a crate for coloring and formatting terminal output. Simple\nexample:",null,null],[3,"Style","","Saves all properties of a style. Implements `ToStyle`, so you can call\nstyle modifiers on it.",null,null],[12,"fg","","",0,null],[12,"bg","","",0,null],[3,"Painted","","Wraps an object of type `T` and a style. When attempting to print it, the\ngiven style is applied before printing and reset afterwards.\nAll formatting traits (`Display`, `Debug`, ...) that are implemented\nfor `T` are also implemented the wrapper type `Painted<T>`.",null,null],[4,"Color","","Lists all possible Colors. It implements `ToStyle` so it's possible to call\n`ToStyle`'s methods directly on a `Color` variant like:",null,null],[13,"NotSet","","",1,null],[13,"Black","","",1,null],[13,"Red","","",1,null],[13,"Green","","",1,null],[13,"Yellow","","",1,null],[13,"Blue","","",1,null],[13,"Magenta","","",1,null],[13,"Cyan","","",1,null],[13,"White","","",1,null],[13,"BrightBlack","","",1,null],[13,"BrightRed","","",1,null],[13,"BrightGreen","","",1,null],[13,"BrightYellow","","",1,null],[13,"BrightBlue","","",1,null],[13,"BrightMagenta","","",1,null],[13,"BrightCyan","","",1,null],[13,"BrightWhite","","",1,null],[4,"Attr","","Lists possible attributes. It implements `ToStyle` so it's possible to call\n`ToStyle`'s methods directly on a `Attr` variant like:",null,null],[13,"Plain","","Just default style",2,null],[13,"Bold","","",2,null],[13,"Dim","","",2,null],[13,"Underline","","",2,null],[13,"Blink","","",2,null],[13,"Reverse","","",2,null],[13,"Secure","","",2,null],[8,"ToStyle","","Everything that can be seen as part of a style. This is the core of this\ncrate. All functions (\"style modifier\") consume self and return a modified\nversion of the style.",null,null],[10,"to_style","","",3,{"inputs":[{"name":"tostyle"}],"output":{"name":"style"}}],[11,"fg","","Sets the foreground (text) color.",3,{"inputs":[{"name":"tostyle"},{"name":"color"}],"output":{"name":"style"}}],[11,"bg","","Sets the background color.",3,{"inputs":[{"name":"tostyle"},{"name":"color"}],"output":{"name":"style"}}],[11,"bold","","Makes the text bold.",3,{"inputs":[{"name":"tostyle"}],"output":{"name":"style"}}],[11,"dim","","Dim mode.",3,{"inputs":[{"name":"tostyle"}],"output":{"name":"style"}}],[11,"underline","","Underlines the text.",3,{"inputs":[{"name":"tostyle"}],"output":{"name":"style"}}],[11,"not_underline","","Removes underline-attribute.",3,{"inputs":[{"name":"tostyle"}],"output":{"name":"style"}}],[11,"blink","","Underlines the text.",3,{"inputs":[{"name":"tostyle"}],"output":{"name":"style"}}],[11,"reverse","","Underlines the text.",3,{"inputs":[{"name":"tostyle"}],"output":{"name":"style"}}],[11,"secure","","Secure mode.",3,{"inputs":[{"name":"tostyle"}],"output":{"name":"style"}}],[11,"paint","","Wraps the style specified in `self` and something of arbitrary type\ninto a `Painted`. When `Painted` is printed it will print the arbitrary\nsomething with the given style.",3,{"inputs":[{"name":"tostyle"},{"name":"t"}],"output":{"name":"painted"}}],[11,"with","","Executes the given function, applying the style information before\ncalling it and resetting after it finished.",3,{"inputs":[{"name":"tostyle"},{"name":"f"}],"output":{"name":"r"}}],[11,"eq","","",1,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"fmt","","",1,{"inputs":[{"name":"color"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",1,{"inputs":[{"name":"color"}],"output":{"name":"self"}}],[11,"to_style","","Returns a Style with default values and the `self` color as foreground\ncolor.",1,{"inputs":[{"name":"color"}],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"fmt","","",2,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_style","","Returns a Style with default values and the `self` attribute enabled.",2,{"inputs":[{"name":"attr"}],"output":{"name":"style"}}],[11,"eq","","",0,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"fmt","","",0,{"inputs":[{"name":"style"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[{"name":"style"}],"output":{"name":"self"}}],[11,"get_bold","","",0,{"inputs":[{"name":"style"}],"output":{"name":"option"}}],[11,"set_bold","","",0,{"inputs":[{"name":"style"},{"name":"option"}],"output":null}],[11,"get_dim","","",0,{"inputs":[{"name":"style"}],"output":{"name":"option"}}],[11,"set_dim","","",0,{"inputs":[{"name":"style"},{"name":"option"}],"output":null}],[11,"get_underline","","",0,{"inputs":[{"name":"style"}],"output":{"name":"option"}}],[11,"set_underline","","",0,{"inputs":[{"name":"style"},{"name":"option"}],"output":null}],[11,"get_blink","","",0,{"inputs":[{"name":"style"}],"output":{"name":"option"}}],[11,"set_blink","","",0,{"inputs":[{"name":"style"},{"name":"option"}],"output":null}],[11,"get_reverse","","",0,{"inputs":[{"name":"style"}],"output":{"name":"option"}}],[11,"set_reverse","","",0,{"inputs":[{"name":"style"},{"name":"option"}],"output":null}],[11,"get_secure","","",0,{"inputs":[{"name":"style"}],"output":{"name":"option"}}],[11,"set_secure","","",0,{"inputs":[{"name":"style"},{"name":"option"}],"output":null}],[11,"to_style","","Dummy implementation that just returns `self`.",0,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"fmt","","",4,{"inputs":[{"name":"painted"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"painted"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"painted"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"painted"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"painted"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"painted"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"painted"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"painted"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"painted"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Style"],[4,"Color"],[4,"Attr"],[8,"ToStyle"],[3,"Painted"]]};
searchIndex['term'] = {"items":[[0,"","term","Terminal formatting library.",null,null],[4,"Attr","","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[4,"Error","","An error arising from interacting with the terminal.",null,null],[13,"Io","","Indicates an error from any underlying IO",1,null],[13,"TerminfoParsing","","Indicates an error during terminfo parsing",1,null],[13,"ParameterizedExpansion","","Indicates an error expanding a parameterized string from the terminfo database",1,null],[13,"NotSupported","","Indicates that the terminal does not support the requested operation.",1,null],[13,"TermUnset","","Indicates that the `TERM` environment variable was unset, and thus we were unable to detect\nwhich terminal we should be using.",1,null],[13,"TerminfoEntryNotFound","","Indicates that we were unable to find a terminfo entry for the requested terminal.",1,null],[13,"CursorDestinationInvalid","","Indicates that the cursor could not be moved to the requested position.",1,null],[13,"ColorOutOfRange","","Indicates that the terminal does not support displaying the requested color.",1,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn't be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn't be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",2,null],[12,"bools","","Map of capability name to boolean value",2,null],[12,"numbers","","Map of capability name to numeric value",2,null],[12,"strings","","Map of capability name to raw (unexpanded) string",2,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record.",null,null],[4,"Error","","An error from parsing a terminfo entry",null,null],[13,"BadMagic","","The \"magic\" number at the start of the file was wrong.",3,null],[13,"NotUtf8","","The names in the file were not valid UTF-8.",3,null],[13,"ShortNames","","The names section of the file was empty",3,null],[13,"TooManyBools","","More boolean parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyNumbers","","More number parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyStrings","","More string parameters are present in the file than this crate knows how to interpret.",3,null],[13,"InvalidLength","","The length of some field was not >= -1.",3,null],[13,"NamesMissingNull","","The names table was missing a trailing null terminator.",3,null],[13,"StringsMissingNull","","The strings table was missing a trailing null terminator.",3,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames`\nis true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",4,null],[13,"Number","","",4,null],[4,"Error","","An error from interpreting a parameterized string.",null,null],[13,"StackUnderflow","","Data was requested from the stack, but the stack didn't have enough elements.",5,null],[13,"TypeMismatch","","The type of the element(s) on top of the stack did not match the type that the operator\nwanted.",5,null],[13,"UnrecognizedFormatOption","","An unrecognized format option was used.",5,null],[13,"InvalidVariableName","","An invalid variable name was used.",5,null],[13,"InvalidParameterIndex","","An invalid parameter index was used.",5,null],[13,"MalformedCharacterConstant","","A malformed character constant was used.",5,null],[13,"IntegerConstantOverflow","","An integer constant was too large (overflowed an i32)",5,null],[13,"MalformedIntegerConstant","","A malformed integer constant was used.",5,null],[13,"FormatWidthOverflow","","A format width constant was too large (overflowed a usize)",5,null],[13,"FormatPrecisionOverflow","","A format precision constant was too large (overflowed a usize)",5,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",4,{"inputs":[{"name":"param"}],"output":{"name":"param"}}],[11,"eq","","",5,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"new","","Return a new zero-initialized Variables",6,{"inputs":[{"name":"variables"}],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",2,{"inputs":[{"name":"terminfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_env","","Create a TermInfo based on current environment.",2,{"inputs":[{"name":"terminfo"}],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",2,{"inputs":[{"name":"terminfo"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",2,{"inputs":[{"name":"terminfo"},{"name":"p"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",3,{"inputs":[{"name":"error"},{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"description","","",3,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",3,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fg","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"color"}],"output":{"name":"result"}}],[11,"bg","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"color"}],"output":{"name":"result"}}],[11,"attr","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"attr"}],"output":{"name":"result"}}],[11,"supports_attr","","",7,{"inputs":[{"name":"terminfoterminal"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"reset","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"cursor_up","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"delete_line","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"carriage_return","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[11,"get_ref","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"get_mut","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"into_inner","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"t"}}],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",7,{"inputs":[{"name":"terminfoterminal"},{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",7,{"inputs":[{"name":"terminfoterminal"},{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",7,null],[11,"flush","","",7,{"inputs":[{"name":"terminfoterminal"}],"output":{"name":"result"}}],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[6,"Result","","The canonical `Result` type using this crate's Error type.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc).",null,null],[16,"Output","","The terminal's output writer type.",8,null],[10,"fg","","Sets the foreground color to the given color.",8,{"inputs":[{"name":"terminal"},{"name":"color"}],"output":{"name":"result"}}],[10,"bg","","Sets the background color to the given color.",8,{"inputs":[{"name":"terminal"},{"name":"color"}],"output":{"name":"result"}}],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(())` if the attribute is\nsupported and was sent to the terminal, or `Err(e)` if there was an error or the attribute\nwasn't supported.",8,{"inputs":[{"name":"terminal"},{"name":"attr"}],"output":{"name":"result"}}],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",8,{"inputs":[{"name":"terminal"},{"name":"attr"}],"output":{"name":"bool"}}],[10,"reset","","Resets all terminal attributes and colors to their defaults.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"cursor_up","","Moves the cursor up one line.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",8,{"inputs":[{"name":"terminal"}],"output":{"name":"result"}}],[10,"get_ref","","Gets an immutable reference to the stream inside",8,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[10,"get_mut","","Gets a mutable reference to the stream inside",8,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",8,{"inputs":[{"name":"terminal"}],"output":{"name":"output"}}],[11,"clone","","",0,{"inputs":[{"name":"attr"}],"output":{"name":"attr"}}],[11,"eq","","",0,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"attr"},{"name":"attr"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"attr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"Attr"],[4,"Error"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[4,"Error"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex['kernel32'] = {"items":[],"paths":[]};
searchIndex['winapi'] = {"items":[],"paths":[]};
initSearch(searchIndex);
